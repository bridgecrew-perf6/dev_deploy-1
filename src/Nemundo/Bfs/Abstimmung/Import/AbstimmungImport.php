<?phpnamespace Nemundo\Bfs\Abstimmung\Import;use Nemundo\Bfs\Abstimmung\Content\Abstimmung\AbstimmungContentType;use Nemundo\Bfs\Abstimmung\Data\Abstimmung\Abstimmung;use Nemundo\Bfs\Abstimmung\Data\Abstimmung\AbstimmungId;use Nemundo\Bfs\Abstimmung\Data\Datum\Datum;use Nemundo\Bfs\Abstimmung\Data\Datum\DatumId;use Nemundo\Bfs\Abstimmung\Data\Jahr\Jahr;use Nemundo\Bfs\Abstimmung\Data\Resultat\ResultatBulk;use Nemundo\Bfs\Abstimmung\Type\GeoLevel\AbstractGeoLevel;use Nemundo\Bfs\Abstimmung\Type\GeoLevel\BezirkGeoLevel;use Nemundo\Bfs\Abstimmung\Type\GeoLevel\GemeindeGeoLevel;use Nemundo\Bfs\Abstimmung\Type\GeoLevel\KantonGeoLevel;use Nemundo\Bfs\Abstimmung\Type\GeoLevel\BundGeoLevel;use Nemundo\Content\Builder\IndexBuilder;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\File;use Nemundo\Core\Json\Reader\JsonReader;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Type\DateTime\Date;use Nemundo\Core\Type\Text\Text;use Nemundo\Core\WebRequest\CurlWebRequest;use Nemundo\Project\Path\TmpPath;class AbstimmungImport extends AbstractBase{    /**     * @var bool     */    public $showProgress = false;    private $bezirkId;    private $kantonId;    private $gemeindeId;    /**     * @var ResultatBulk     */    private $resultatData;    public function importAbstimmung($downloadUrl)    {        if ($this->showProgress) {            (new Debug())->write($downloadUrl);        }        $filename = (new TmpPath())->addPath('abstimmung.json')->getFullFilename();        $file = new File($filename);        if ($file->fileExists()) {            $file->deleteFile();        }        (new CurlWebRequest())->downloadUrl($downloadUrl, $filename);        $this->resultatData = new ResultatBulk();        //$this->resultatData->updateOnDuplicate=true;        //$this->resultatData->ignoreIfExists=true;        $reader = new JsonReader();        $reader->fromFilename($filename);        $json = $reader->getData();        $datumId = null;        if (isset($json['abstimmtag'])) {            $abstimmungstagText = new Text($json['abstimmtag']);            $datum = new Date();            $datum->setYear($abstimmungstagText->getSubstring(0, 4));            $datum->setMonth($abstimmungstagText->getSubstring(4, 2));            $datum->setDay($abstimmungstagText->getSubstring(6, 2));            $jahr = new Jahr();            $jahr->ignoreIfExists = true;            $jahr->id = $datum->getYear();            $jahr->save();            $data = new Datum();            $data->ignoreIfExists = true;            $data->datum = $datum;            $data->jahr = $datum->getYear();            $data->save();            $id = new DatumId();            $id->filter->andEqual($id->model->datum, $datum->getIsoDate());            $datumId = $id->getId();        } else {            (new LogMessage())->writeError('Datum not found');        }        if (isset($json['schweiz']['vorlagen'])) {            foreach ($json['schweiz']['vorlagen'] as $vorlageJson) {                $abstimmungNumber = $vorlageJson['vorlagenId'];                foreach ($vorlageJson['vorlagenTitel'] as $textJson) {                    $vorlage = $textJson['text'];                    $language = $textJson['langKey'];                    if ($language == 'de') {                        $data = new Abstimmung();                        $data->ignoreIfExists = true;                        $data->abstimmung = $vorlage;                        $data->abstimmungNumber = $abstimmungNumber;                        $data->datumId = $datumId;                        $data->save();                    }                }                $id = new AbstimmungId();                $id->filter->andEqual($id->model->abstimmungNumber, $abstimmungNumber);                $abstimmungId = $id->getId();                $type = new AbstimmungContentType($abstimmungId);                (new IndexBuilder())->buildIndex($type);                /*(new ContentIndexAction())->onAction($type);                (new SearchIndexAction())->onAction($type);                (new TimelineAction())->onAction($type);*/                $this->kantonId = 0;                $this->bezirkId = 0;                $this->gemeindeId = 0;                $this->addGeo(new BundGeoLevel(), $abstimmungId, $vorlageJson);                foreach ($vorlageJson['kantone'] as $kantonJson) {                    $this->kantonId = $kantonJson['geoLevelnummer'];                    $this->bezirkId = 0;                    $this->gemeindeId = 0;                    $this->addGeo(new KantonGeoLevel(), $abstimmungId, $kantonJson);                    foreach ($kantonJson['bezirke'] as $bezirkeJson) {                        $this->bezirkId = $bezirkeJson['geoLevelnummer'];                        $this->addGeo(new BezirkGeoLevel(), $abstimmungId, $bezirkeJson);                    }                    foreach ($kantonJson['gemeinden'] as $gemeindeJson) {                        $this->gemeindeId = $gemeindeJson['geoLevelnummer'];                        $this->addGeo(new GemeindeGeoLevel(), $abstimmungId, $gemeindeJson);                    }                }            }        } else {            (new LogMessage())->writeError('Vorlage not found');        }        $this->resultatData->saveBulk();    }    private function addGeo(AbstractGeoLevel $geoLevel, $abstimmungId, $json)    {        $geoNumber = 0;        if (isset($json['geoLevelnummer'])) {            $geoNumber = $json['geoLevelnummer'];        }        //(new Debug())->write($geoNumber);        /*$geo = $json['geoLevelname'];        $geoNumber = $json['geoLevelnummer'];        if ($geoLevel->id == (new LandGeoLevel())->id) {            $geo = 'Schweiz';            $geoNumber = 0;        }*/        /*        $data = new Geo();        $data->ignoreIfExists = true;        $data->geoLevelId = $geoLevel->id;        $data->geo = $geo;        $data->geoNumber = $geoNumber;        $data->save();        $id = new GeoId();        $id->filter->andEqual($id->model->geoLevelId, $geoLevel->id);        $id->filter->andEqual($id->model->geoNumber, $geoNumber);        $geoId = $id->getId();*/        //$data = new Resultat();        //$data->updateOnDuplicate = true;        //$this->resultatData->updateOnDuplicate=true;        //$data->ignoreIfExists = true;        //$this->resultatData->geoId = $geoId;        //$this->resultatData->geoId = 0;  //$geoId;        $ausgezaehlt = $json['resultat']['gebietAusgezaehlt'];        $jaAbsolut = 0;        $neinAbsolut = 0;        $jaProzent = 0;        $stimmbeteiligungProzent = 0;        if ($ausgezaehlt) {            $jaAbsolut = $json['resultat']['jaStimmenAbsolut'];            if (!is_numeric($jaAbsolut)) {                $jaAbsolut = 0;            }            $neinAbsolut = $json['resultat']['neinStimmenAbsolut'];            if (!is_numeric($neinAbsolut)) {                $neinAbsolut = 0;            }            $jaProzent = $json['resultat']['jaStimmenInProzent'];            if (!is_numeric($jaProzent)) {                $jaProzent = 0;            }            $stimmbeteiligungProzent = $json['resultat']['stimmbeteiligungInProzent'];            if (!is_numeric($stimmbeteiligungProzent)) {                $stimmbeteiligungProzent = 0;            }        }        $this->resultatData->abstimmungId = $abstimmungId;        $this->resultatData->geoNumber = $geoNumber;        $this->resultatData->geoLevelId = $geoLevel->id;        $this->resultatData->jaAbsolut = $jaAbsolut;        $this->resultatData->neinAbsolut = $neinAbsolut;        $this->resultatData->jaProzent = $jaProzent;        $this->resultatData->stimmbeteiligungProzent = $stimmbeteiligungProzent;        $this->resultatData->kantonId = $this->kantonId;        $this->resultatData->bezirkId = $this->bezirkId;        $this->resultatData->gemeindeId = $this->gemeindeId;        $this->resultatData->ausgezaehlt = $ausgezaehlt;        $this->resultatData->save();    }}