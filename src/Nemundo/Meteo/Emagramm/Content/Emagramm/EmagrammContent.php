<?phpnamespace Nemundo\Meteo\Emagramm\Content\Emagramm;use Nemundo\Content\App\Timeline\Index\TimelineIndexTrait;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Type\DateTime\DateTime;use Nemundo\Meteo\Emagramm\Data\Emagramm\Emagramm;use Nemundo\Meteo\Emagramm\Data\Emagramm\EmagrammCount;use Nemundo\Meteo\Emagramm\Data\Emagramm\EmagrammDelete;use Nemundo\Meteo\Emagramm\Data\Location\Location;use Nemundo\Meteo\Emagramm\Data\Location\LocationId;// EmagrammContentImport// EmagrammContentBuilderclass EmagrammContent extends EmagrammContentType{    public $location;    /**     * @var DateTime     */    public $emagrammDateTime;    public $filename;    protected function onCreate()    {        $data = new Emagramm();        $data->dateTime = $this->emagrammDateTime;        $data->locationId = $this->getLocationId();        $data->image->fromFilename($this->filename);        $this->dataId = $data->save();    }    protected function onUpdate()    {    }    protected function onDelete()    {        (new EmagrammDelete())->deleteById($this->dataId);    }    protected function onIndex()    {        $this->saveTimeline();    }    public function existItem()    {        $value = false;        $count = new EmagrammCount();        $count->filter->andEqual($count->model->locationId, $this->getLocationId());        $count->filter->andEqual($count->model->dateTime, $this->emagrammDateTime->getIsoDateTime());        if ($count->getCount() > 0) {            $value = true;        }        return $value;    }    private function getLocationId()    {        $data = new Location();        $data->ignoreIfExists = true;        $data->location = $this->location;        $data->save();        $id = new LocationId();        $id->filter->andEqual($id->model->location, $this->location);        $locationId =$id->getId();        return $locationId;    }}