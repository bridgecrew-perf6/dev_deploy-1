<?phpnamespace Nemundo\Meteo\Emagramm\Install;use Nemundo\App\Application\Setup\ApplicationSetup;use Nemundo\App\Application\Type\Install\AbstractInstall;use Nemundo\App\Scheduler\Setup\SchedulerSetup;use Nemundo\App\Script\Setup\ScriptSetup;use Nemundo\App\SystemLog\Application\SystemLogApplication;use Nemundo\App\WebService\Setup\ServiceRequestSetup;use Nemundo\Content\App\Timeline\Application\TimelineApplication;use Nemundo\Content\Application\ContentApplication;use Nemundo\Content\Setup\ContentTypeSetup;use Nemundo\Meteo\Emagramm\Application\EmagrammApplication;use Nemundo\Meteo\Emagramm\Content\Emagramm\EmagrammContentType;use Nemundo\Meteo\Emagramm\Content\Latest\EmagrammLatestContentType;use Nemundo\Meteo\Emagramm\Data\EmagrammModelCollection;use Nemundo\Meteo\Emagramm\Scheduler\EmagrammScheduler;use Nemundo\Meteo\Emagramm\Script\EmagrammCleanScript;use Nemundo\Meteo\Emagramm\Service\EmagrammImageService;use Nemundo\Meteo\Emagramm\Service\EmagrammLocationService;use Nemundo\Model\Setup\ModelCollectionSetup;class EmagrammInstall extends AbstractInstall{    public function install()    {        //(new SystemLogApplication())->installApp();        /*(new ContentApplication())->installApp();        (new TimelineApplication())->installApp();*/        /*(new ApplicationSetup())            ->addApplication(new EmagrammApplication());*/        (new ModelCollectionSetup())            ->addCollection(new EmagrammModelCollection());        (new SchedulerSetup(new EmagrammApplication()))            ->addScheduler(new EmagrammScheduler());        (new ContentTypeSetup(new EmagrammApplication()))            //->addContentType(new EmagrammLatestContentType())            ->addContentType(new EmagrammContentType());        (new ScriptSetup())            ->addScript(new EmagrammCleanScript());        (new ServiceRequestSetup(new EmagrammApplication()))            ->addService(new EmagrammLocationService())            ->addService(new EmagrammImageService());        /*        if ((new LocationCount())->getCount() == 0) {            $crawler = new EmagrammImageCrawler();            foreach ($crawler->getData() as $crawlerItem) {                $data = new Location();                $data->ignoreIfExists = true;                $data->location = $crawlerItem->location;                $data->save();            }        }*/    }}