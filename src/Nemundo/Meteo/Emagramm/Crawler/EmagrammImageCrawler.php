<?phpnamespace Nemundo\Meteo\Emagramm\Crawler;use Nemundo\App\SystemLog\Message\SystemLogMessage;use Nemundo\Core\Base\DataSource\AbstractDataSource;use Nemundo\Core\Http\Response\StatusCode;use Nemundo\Core\RegularExpression\RegularExpressionReader;use Nemundo\Core\Type\DateTime\DateTime;use Nemundo\Core\Type\Text\Text;use Nemundo\Core\WebRequest\CurlWebRequest;use Nemundo\Meteo\Emagramm\Application\EmagrammApplication;class EmagrammImageCrawler extends AbstractDataSource{    protected function loadData()    {        $http = new CurlWebRequest();        $response = $http->getUrl('https://www.meteoschweiz.admin.ch/home/mess-und-prognosesysteme/atmosphaere/radiosondierung.html');        if ($response->statusCode == StatusCode::OK) {        $re = new RegularExpressionReader();        $re->regularExpression = '<li><a class="icn-before norm-files" href="/product/input/radio-soundings/([^"]*?\.gif)".*?<span class="visuallyhidden">(.*?)</span>';        $re->text = $response->html;        foreach ($re->getData() as $item) {            $url = 'http://www.meteoschweiz.admin.ch/product/input/radio-soundings/' . $item->getValue(0);            //Payerne & Stuttgart, 29.06.2017 00:00 UTC            $emagrammText = new Text($item->getValue(1));            $list = $emagrammText->split(', ');            $emagramm = new EmagrammCrawlerItem($http);            $emagramm->location = $list[0];            $emagramm->dateTimeText = $list[1];            $emagramm->url = $url;            $dateTimeText = new Text($list[1]);            $emagramm->dateTime = new DateTime();            $emagramm->dateTime->setDay($dateTimeText->getSubstring(0, 2));            $emagramm->dateTime->setMonth($dateTimeText->getSubstring(3, 2));            $emagramm->dateTime->setYear($dateTimeText->getSubstring(6, 4));            $emagramm->dateTime->setHour($dateTimeText->getSubstring(11, 2));            $emagramm->dateTime->setMinute($dateTimeText->getSubstring(14, 2));            $this->addItem($emagramm);        }        } else {            (new SystemLogMessage(new EmagrammApplication()))->logError($response->errorMessage);        }    }    /**     * @return EmagrammCrawlerItem[]     */    public function getData()    {        return parent::getData();    }}