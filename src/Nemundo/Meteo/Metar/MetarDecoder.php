<?phpnamespace Nemundo\Meteo\Metar;use Nemundo\Core\Base\AbstractBaseClass;use Nemundo\Core\Type\DateTime\DateTime;use Nemundo\Core\Type\Number\Number;use Nemundo\Core\Type\Text\Text;class MetarDecoder extends AbstractBaseClass{    /**     * @var string     */    public $airport;    public $dateTime;    //public $time;    public $windDirection;    /**     * @var bool     */    public $windVariable = false;    public $wind;    public $cavok = false;    public $visiblity;    public $weather;    /**     * @var int     */    public $temperature;    /**     * @var int     */    public $dewPoint;    /**     * @var bool     */    private $hasQnh=false;    /**     * @var int     */    public $qnh;    /**     * @var bool     */    public $auto = false;    /**     * @var string     */    public $metarRaw;    public function __construct($metar)    {        $this->metarRaw = $metar;        $this->decodeMetar();    }    public function hasQnh() {        return $this->hasQnh;    }    private function decodeMetar()    {        $metarText = new Text($this->metarRaw);        $metarList = $metarText->split(' ');        $this->airport = $metarList[0];        $time = new Text($metarList[1]);        $hour = $time->getSubstring(2, 2);        $minute = $time->getSubstring(4, 2);        //$time = new Text($metarList[1]);        //$this->time = $time->getSubstring(2, 2) . ':' . $time->getSubstring(4, 2);        $this->dateTime = new DateTime();        $day = $time->getSubstring(0, 2);        if ((new Text($day))->isNumber()) {        $this->dateTime->setDay($day);            $this->dateTime->setHour($hour);            $this->dateTime->setMinute($minute);        }        // Auto        foreach ($metarList as $line) {            if ($line == 'AUTO') {                $this->auto = true;            }        }        // Wind        $count = 0;        $windNumber = null;        foreach ($metarList as $line) {            $tmp = new Text($line);            if ($tmp->getSubstring(5, 2) == 'KT') {                $this->windDirection = $tmp->getSubstring(0, 3);                $this->wind = $tmp->substring(3, 2)->removeLeadingZero()->getValue();                $windNumber = $count;            }        }        if ($this->windDirection == 'VRB') {            $this->windDirection = null;            $this->windVariable = true;        }        // CAVOK        foreach ($metarList as $line) {            if ($line == 'CAVOK') {                $this->weather = 'CAVOK';                $this->cavok = true;            }        }        if (!$this->cavok) {            $this->visiblity = $metarList[$windNumber + 1];            $this->weather = $metarList[$windNumber + 2];        }        // QNH        $count = 0;        foreach ($metarList as $line) {            $tmp = new Text($line);            if ($tmp->getSubstring(0, 1) == 'Q') {                $this->hasQnh=true;                $this->qnh = $tmp->replace('=', '')->substring(1)->getValue();                if (!(new Text($this->qnh))->isNumber()) {                    $this->hasQnh=false;                    $this->qnh=null;                }                $qnhNumber = $count;                // Temperatur / Dew Point                $temperatureDewPoint = new Text($metarList[$qnhNumber - 1]);                $pos = $temperatureDewPoint->getPosistion('/');                //Debug::write($temperatureDewPoint->getPosistion('/'));                $this->temperature = $temperatureDewPoint->getSubstring(0, $pos);                $this->dewPoint = $temperatureDewPoint->getSubstring($pos + 1);                /*if ($tmp->getSubstring(0, 1) == 'Q') {                    $this->qnh = $tmp->replace('=', '')->substring(1)->getValue();                    $qnhNumber = $count;                } */            }            $count++;        }    }}