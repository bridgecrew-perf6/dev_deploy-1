<?phpnamespace Nemundo\Meteo\Isd\Page;use Nemundo\Admin\Com\Button\AdminSearchButton;use Nemundo\Admin\Com\Title\AdminTitle;use Nemundo\Com\FormBuilder\SearchForm;use Nemundo\Core\Debug\Debug;use Nemundo\Html\Form\Input\HiddenInput;use Nemundo\Meteo\Isd\Com\Chart\Day\QnhDayChart;use Nemundo\Meteo\Isd\Com\Chart\Day\TemperatureDayChart;use Nemundo\Meteo\Isd\Com\Chart\Day\WindDirectionDayChart;use Nemundo\Meteo\Isd\Com\Chart\Day\WindMaxDayChart;use Nemundo\Meteo\Isd\Com\Chart\Hour\PrecipitationHourChart;use Nemundo\Meteo\Isd\Com\Chart\Hour\QnhHourChart;use Nemundo\Meteo\Isd\Com\Chart\Hour\TemperatureDewPointHourChart;use Nemundo\Meteo\Isd\Com\Chart\Hour\WindDirectionHourChart;use Nemundo\Meteo\Isd\Com\Chart\Hour\WindHourChart;use Nemundo\Meteo\Isd\Parameter\StationListParameterList;use Nemundo\Meteo\Isd\Parameter\StationParameter;use Nemundo\Meteo\Isd\Site\StationItemSite;use Nemundo\Meteo\Isd\Template\IsdTemplate;use Nemundo\Package\Bootstrap\Button\BootstrapSiteButton;use Nemundo\Package\Bootstrap\Layout\Grid\BootstrapRow;use Nemundo\Package\Bootstrap\FormElement\BootstrapFromToDatePicker;class StationItemPage extends IsdTemplate{    public function getContent()    {        //$stationId = (new StationParameter())->getValue();        //$stationRow = (new StationReader())->getRowById($stationId);        /*$stationRow = (new StationParameter())->getParameterName();        $title = new AdminTitle($this);        $title->content = $stationRow->station;        $table = new AdminLabelValueTable($this);        $table->addLabelValue('Station Code', $stationRow->stationCode);        $count = new MeasurementCount();        $count->filter->andEqual($count->model->stationId, $stationRow->id);        $table->addLabelValue('Count', $count->getFormatCount());        $form = new DownloadQueueForm($this);        $form->stationId = $stationId;*/        //$form = new SearchForm($this);        /*$hidden = new HiddenInput($form);        $hidden->name = (new StationParameter())->getParameterName();        $hidden->value = $stationId;*/        /*$formRow = new BootstrapRow($form);        $station = new StationAutocompleteListBox($formRow);        $station->name= (new StationParameter())->getParameterName();        $station->searchMode=true;        $datePickerFrom = new BootstrapDatePicker($formRow);        $datePickerFrom->label = 'Date From';        $datePickerFrom->searchMode = true;        $datePickerTo = new BootstrapDatePicker($formRow);        $datePickerTo->label = 'Date To';        $datePickerTo->searchMode = true;        $submit = new AdminSubmitButton($formRow);        $submit->label = 'Search';*/        //if ($datePickerFrom->hasValue()) {        $stationParameter = new StationParameter();        $stationRow = $stationParameter->getStationRow();        $title = new AdminTitle($this);        $title->content = $stationRow->station;        $form = new SearchForm($this);        $formRow = new BootstrapRow($form);        $datePicker = new BootstrapFromToDatePicker($formRow);        $datePicker->searchMode = true;        $hidden = new HiddenInput($form);        $hidden->name = $stationParameter->getParameterName();        $hidden->value = $stationParameter->getValue();        new AdminSearchButton($formRow);        /*            $form = new DownloadQueueForm($this);            $form->stationId = $stationRow->id;            /*            $chart = new TemperatureDayChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            /*            $chart = new TemperatureMaxDewPointDayChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);*/        /*        $chart = new WindHourChart($this);        $chart->dateFrom = $datePicker->getFromDate();        $chart->dateTo = $datePicker->getToDate();        $chart->addStationRow($stationRow);        $chart =new WindDirectionHourChart($this);        $chart->dateFrom = $datePicker->getFromDate();        $chart->dateTo = $datePicker->getToDate();        $chart->addStationRow($stationRow);        $chart = new TemperatureDewPointHourChart($this);        $chart->dateFrom = $datePicker->getFromDate();        $chart->dateTo = $datePicker->getToDate();        $chart->addStationRow($stationRow);        $chart =new QnhHourChart($this);        $chart->dateFrom = $datePicker->getFromDate();        $chart->dateTo = $datePicker->getToDate();        $chart->addStationRow($stationRow);*/        $chart =new PrecipitationHourChart($this);        $chart->dateFrom = $datePicker->getDateFrom();        $chart->dateTo = $datePicker->getDateTo();        $chart->addStationRow($stationRow);        $chart = new TemperatureDayChart($this);        $chart->dateFrom = $datePicker->getDateFrom();        $chart->dateTo = $datePicker->getDateTo();        $chart->addStationRow($stationRow);        $chart = new WindMaxDayChart($this);        $chart->dateFrom = $datePicker->getDateFrom();        $chart->dateTo = $datePicker->getDateTo();        $chart->addStationRow($stationRow);        $chart = new WindDirectionDayChart($this);        $chart->dateFrom = $datePicker->getDateFrom();        $chart->dateTo = $datePicker->getDateTo();        $chart->addStationRow($stationRow);        $chart =new QnhDayChart($this);        $chart->dateFrom = $datePicker->getDateFrom();        $chart->dateTo = $datePicker->getDateTo();        $chart->addStationRow($stationRow);        /*        $measurementReader = new MeasurementReader();        $measurementReader->filter->andEqual($measurementReader->model->stationId, $stationRow->id);        $measurementReader->addGroup($measurementReader->model->date);        $max=new MaxField($measurementReader);        $max->aggregateField=$measurementReader->model->temperature;        $min=new MinField($measurementReader);        $min->aggregateField=$measurementReader->model->temperature;        foreach ($measurementReader->getData() as $measurementRow) {            (new Debug())->write($measurementRow->getModelValue($max));        }*/        //2352        /*            $chart = new DataChart($this);            $temperature = new LineChartData($chart);            $temperature->legend = 'Temperature';            $dewPoint = new LineChartData($chart);            $dewPoint->legend = 'Dew Point';            $table = new AdminTable($this);            $reader = new MeasurementReader();            $reader->filter->andEqual($reader->model->stationId, $stationId);            //$reader->filter->andEqual($reader->model->date, $datePicker->getDateValue()->getIsoDateFormat());            //$reader->filter->andEqualOrGreater($reader->model->date, (new Date('2020-01-01'))->getIsoDateFormat());            //$reader->filter->andEqualOrSmaller($reader->model->date, (new Date('2020-04-01'))->getIsoDateFormat());            $reader->addOrder($reader->model->id);            //$reader->limit = 300;            $header = new TableHeader($table);            $header->addText($reader->model->dateTime->label);            $header->addText($reader->model->temperature->label);            $header->addText($reader->model->dewPoint->label);            $header->addText($reader->model->wind->label);            $header->addText($reader->model->windDirection->label);            foreach ($reader->getData() as $measurementRow) {                $chart->addXAxisLabel($measurementRow->time->getTimeLeadingZero());                $temperature->addValue($measurementRow->temperature);                $dewPoint->addValue($measurementRow->dewPoint);                $row = new TableRow($table);                $row->addText($measurementRow->dateTime->getShortDateTimeLeadingZeroFormat());                $row->addText($measurementRow->temperature);                $row->addText($measurementRow->dewPoint);                $row->addText($measurementRow->wind);                $row->addText($measurementRow->windDirection);            }*///        }        return parent::getContent();    }}