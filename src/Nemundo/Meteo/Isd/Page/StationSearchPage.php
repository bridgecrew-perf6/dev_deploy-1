<?phpnamespace Nemundo\Meteo\Isd\Page;use Nemundo\Admin\Com\Button\AdminSearchButton;use Nemundo\Admin\Com\Table\AdminTable;use Nemundo\Com\FormBuilder\SearchForm;use Nemundo\Com\Html\Listing\UnorderedList;use Nemundo\Com\TableBuilder\TableHeader;use Nemundo\Com\TableBuilder\TableRow;use Nemundo\Core\Type\DateTime\Date;use Nemundo\Db\Sql\Order\SortOrder;use Nemundo\Meteo\Isd\Com\Container\StationContainer;use Nemundo\Meteo\Isd\Com\ListBox\StationAutocompleteListBox;use Nemundo\Meteo\Isd\Data\DownloadQueue\DownloadQueueReader;use Nemundo\Meteo\Isd\Data\MeasurementDay\MeasurementDayReader;use Nemundo\Meteo\Isd\Template\IsdTemplate;use Nemundo\Meteo\Zamg\Com\WetterkarteRemoteImage;use Nemundo\Package\Bootstrap\FormElement\BootstrapDatePicker;use Nemundo\Package\Bootstrap\Layout\Grid\BootstrapRow;class StationSearchPage extends IsdTemplate{    public function getContent()    {        $form = new SearchForm($this);        $formRow = new BootstrapRow($form);        $station = new StationAutocompleteListBox($formRow);        $station->searchMode = true;        $datePickerFrom = new BootstrapDatePicker($formRow);        $datePickerFrom->label = 'Date From';        $datePickerFrom->searchMode = true;        $datePickerFrom->value = (new Date('2020-01-01'))->getShortDateLeadingZeroFormat();        $datePickerTo = new BootstrapDatePicker($formRow);        $datePickerTo->label = 'Date To';        $datePickerTo->searchMode = true;        $datePickerFrom->value = (new Date('2020-01-31'))->getShortDateLeadingZeroFormat();        $submit = new AdminSearchButton($formRow);        if ($station->hasValue()) {            $stationRow = $station->getStationRow();            $ul=new UnorderedList($this);            $downloadReader=new DownloadQueueReader();            $downloadReader->filter->andEqual($downloadReader->model->stationId,$stationRow->id);            $downloadReader->filter->andEqual($downloadReader->model->finished,true);            $downloadReader->addOrder($downloadReader->model->year);            foreach ($downloadReader->getData() as $queueRow) {                $ul->addText($queueRow->year);            }            /*$reader = new MeasurementDayReader();            $reader->filter->andEqual($reader->model->stationId, $stationRow->id);  // $station->getValue());            $reader->addOrder($reader->model->windMax, SortOrder::DESCENDING);            $reader->limit = 10;            $table = new AdminTable($this);            $header = new TableHeader($table);            $header->addText($reader->model->date->label);            $header->addText($reader->model->windMax->label);            $header->addText($reader->model->windDirectionMax->label);            foreach ($reader->getData() as $measurementDayRow) {                $row = new TableRow($table);                $row->addText($measurementDayRow->date->getShortDateLeadingZeroFormat());                $row->addText($measurementDayRow->windMax);                $row->addText($measurementDayRow->windDirectionMax);                $img = new WetterkarteRemoteImage($row);                $img->date = $measurementDayRow->date;            }*/            $container = new StationContainer($this);            $container->stationRow = $stationRow;   //  (new StationTextParameter())->ge            /*            (new StationSessionList())->addValue($station->getStationId());            $temperatureChart = new TemperatureHourChart($this);  // new TemperatureDayChart($this);            $temperatureChart->dateFrom = $datePickerFrom->getDateValue();            $temperatureChart->dateTo = $datePickerTo->getDateValue();            $btn=new AdminSiteButton($this);            $btn->site=SessionClearSite::$site;            $list=new UnorderedList($this);            $windChart = new WindHourChart($this);            $windChart->dateFrom = $datePickerFrom->getDateValue();            $windChart->dateTo = $datePickerTo->getDateValue();            $windDirectionChart = new WindDirectionHourChart($this);            $windDirectionChart->dateFrom = $datePickerFrom->getDateValue();            $windDirectionChart->dateTo = $datePickerTo->getDateValue();            $qnhChart = new QnhHourChart($this);            $qnhChart->dateFrom = $datePickerFrom->getDateValue();            $qnhChart->dateTo = $datePickerTo->getDateValue();            $precipitationChart =new PrecipitationHourChart($this);            $precipitationChart->dateFrom = $datePickerFrom->getDateValue();            $precipitationChart->dateTo = $datePickerTo->getDateValue();            foreach ((new StationSessionList())->getValueList() as $value) {                $list->addText($value);                $stationRow=(new StationReader())->getRowById($value);                $temperatureChart->addStationRow($stationRow);                $windChart->addStationRow($stationRow);                $windDirectionChart->addStationRow($stationRow);                $qnhChart->addStationRow($stationRow);                $precipitationChart->addStationRow($stationRow);            }*/            //$stationRow = $station->getStationRow();            /*            $chart = new TemperatureDayChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new TemperatureMaxDewPointDayChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new WindHourChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new WindDirectionHourChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new TemperatureDewPointHourChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new QnhHourChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);            $chart = new PrecipitationHourChart($this);            $chart->dateFrom = $datePickerFrom->getDateValue();            $chart->dateTo = $datePickerTo->getDateValue();            $chart->addStationRow($stationRow);*/        }        return parent::getContent();    }}