<?phpnamespace Nemundo\Meteo\Isd\Import;use Nemundo\Content\App\TimeSeries\Content\TimeSeries\TimeSeriesContentType;use Nemundo\Core\Archive\GzExtractor;use Nemundo\Core\Base\AbstractImport;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\UniqueFilename;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Path\Path;use Nemundo\Core\TextFile\Reader\TextFileReader;use Nemundo\Core\Type\DateTime\DateTime;use Nemundo\Core\File\File;use Nemundo\Core\Type\Text\Text;use Nemundo\Core\WebRequest\WebRequest;use Nemundo\Db\Sql\Field\Aggregate\SumField;use Nemundo\Db\Sql\Order\SortOrder;use Nemundo\Meteo\Isd\Data\Measurement\MeasurementBulk;use Nemundo\Meteo\Isd\Data\Measurement\MeasurementReader;use Nemundo\Meteo\Isd\Data\MeasurementDay\MeasurementDay;use Nemundo\Meteo\Isd\Data\Station\StationReader;use Nemundo\Meteo\Isd\Data\Station\StationRow;use Nemundo\Meteo\Isd\Path\IsdPath;use Nemundo\Project\Path\TmpPath;class _timeseries extends AbstractMeasurementImport{    /**     * @var StationRow     */    public $stationRow;    /**     * @var int     */    //public $year;    /*public function importDataByStationCode($stationCode)    {        $stationReader = new StationReader();        $stationReader->model->loadCountry();        $stationReader->filter->andEqual($stationReader->model->stationCode, $stationCode);        $this->stationRow = $stationReader->getRow();        $this->importData();        return $this;    }*/    public function importData()    {        /*        $temperatureTimeSeries = new TimeSeriesContentType();        $temperatureTimeSeries->timeSeries='Isd Temperature';        $temperatureTimeSeries->uniqueName='isd_temperature';        $temperatureTimeSeries->saveType();        //(new Debug())->write($temperatureTimeSeries->getDataId());        $qnhTimeSeries = new TimeSeriesContentType();        $qnhTimeSeries->timeSeries='Isd QNH';        $qnhTimeSeries->uniqueName='isd_qnh';        $qnhTimeSeries->saveType();        //(new Debug())->write($qnhTimeSeries->getDataId());        $windTimeSeries = new TimeSeriesContentType();        $windTimeSeries->timeSeries='Isd Wind';        $windTimeSeries->uniqueName='isd_wind';        $windTimeSeries->saveType();*/        $filename = $this->getFilename();        if ((new File($filename))->fileNotExists()) {            $this->downloadFile();        }        $data = new MeasurementBulk();        $data->ignoreIfExists=true;        //$data->updateOnDuplicate = true;        $reader = new TextFileReader($filename);        foreach ($reader->getData() as $line) {            $text = new Text($line);            $text->trim();            if ($text->isNotEmpty()) {                $data->stationId = $this->stationId;                $dateTime = new DateTime();                $dateTime->setYear($text->getSubstring(0, 4));                $dateTime->setMonth($text->getSubstring(5, 2));                $dateTime->setDay($text->getSubstring(8, 2));                $dateTime->setHour($text->getSubstring(11, 2));                $data->dateTime = $dateTime;                $data->date = $dateTime->getDate();                $data->time = $dateTime->getTime();                $data->year=$dateTime->getYear();                $data->month=$dateTime->getMonthNumber();                $temperature = $text->getSubstring(13, 6);                $data->temperature=0;                $data->temperatureValid = false;                if ($temperature !== '-9999') {                    $temperature = $temperature / 10;                    $data->temperature = $temperature;                    $data->temperatureValid = true;                    //$temperatureTimeSeries->addDayData($data->date,$this->stationRow->station,$temperature);                }                $dewPoint = $text->getSubstring(19, 6);                $data->dewPoint=0;                $data->dewPointValid = false;                if ($dewPoint !== '-9999') {                    $data->dewPoint = $dewPoint / 10;                    $data->dewPointValid = true;                }                $qnh = $text->getSubstring(25, 6);                $data->qnh=0;                $data->qnhValid = false;                if ($qnh !== '-9999') {                    $qnh = $qnh / 10;                    $data->qnh=$qnh;                    $data->qnhValid = true;                    //$qnhTimeSeries->addDayData($data->date,$this->stationRow->station,$qnh);                }                $windDirection = $text->getSubstring(31, 6);                $data->windDirection=0;                $data->windDirectionValid = false;                if ($windDirection !== '-9999') {                    $data->windDirection = $windDirection;                    $data->windDirectionValid = true;                }                $wind = $text->getSubstring(37, 6);                $data->wind=0;                $data->windValid = false;                if ($wind !== '-9999') {                    $wind = (($wind / 10) * 60 * 60) / 1000;                    $data->wind = $wind;                    $data->windValid = true;                    //$windTimeSeries->addDayData($data->date,$this->stationRow->station,$wind);                }                $precipitation = $text->getSubstring(50, 6);                $data->precipitation=0;                $data->precipitationValid = false;                if ($precipitation !== '-9999') {                    $data->precipitation = $precipitation / 10;                    $data->precipitationValid = true;                }                $data->save();            }        }        $data->saveBulk();        // auffÃ¼llen von daten        $import = new MeasurementDayImport();        $import->stationId = $this->stationId;        $import->year= $this->year;        $import->importData();    }    private function getPath()    {        $path = (new IsdPath())            ->addPath($this->stationRow->country->countryCode)            ->addPath($this->stationRow->stationCode)            ->createPath()            ->getPath();        return $path;    }    private function getFilename()    {        $filename = (new Path($this->getPath()))            ->addPath($this->year . '.txt')            ->getFilename();        return $filename;    }    private function downloadFile()    {        $url = 'ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-lite/' . $this->year . '/' . $this->stationRow->stationCode . '-99999-' . $this->year . '.gz';        $gzFilename = (new TmpPath())            ->addPath((new UniqueFilename())->getUniqueFilename('gz'))            ->getFilename();        $webRequest = new WebRequest();        $webRequest->throwException = true;        try {            $webRequest->downloadUrl($url, $gzFilename);        } catch (\Exception $exception) {            (new LogMessage())->writeError($exception->getMessage());            exit;        }        $gz = new GzExtractor();        $gz->archiveFilename = $gzFilename;        $gz->extractPath = $this->getPath();        $gz->extractFilename = $this->year . '.txt';        $outputFilename = $gz->extract();        (new File($gzFilename))->deleteFile();        return $outputFilename;    }}