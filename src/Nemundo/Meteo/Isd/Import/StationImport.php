<?phpnamespace Nemundo\Meteo\Isd\Import;use Nemundo\Content\Builder\IndexBuilder;use Nemundo\Core\Base\AbstractImport;use Nemundo\Core\Csv\CsvSeperator;use Nemundo\Core\Csv\Reader\CsvReader;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Type\DateTime\Date;use Nemundo\Db\DbConfig;use Nemundo\Meteo\Base\Download\FileDownload;use Nemundo\Meteo\Isd\Content\Station\StationContentType;use Nemundo\Meteo\Isd\Data\Country\CountryId;use Nemundo\Meteo\Isd\Data\Station\Station;use Nemundo\Meteo\Isd\Data\Station\StationBulk;use Nemundo\Meteo\Isd\Data\Station\StationUpdate;use Nemundo\Meteo\Isd\Store\CountryStore;use Nemundo\Meteo\Isd\Utility\SixDigitDate;use Nemundo\Model\ModelConfig;class StationImport extends AbstractImport{    public function importData()    {        //(new StationContentType())->registerEvent(new GeoIndexEvent());        $countryStore = new CountryStore();        $download = new FileDownload();        $download->url = 'ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv';        $download->filename = 'isd-history.csv';        $filename = $download->downloadFile();        //ModelConfig::        //DbConfig::$bulkCount=5;        $data = new StationBulk();        $data->ignoreIfExists=true;        //$data->updateOnDuplicate = true;        $csvReader = new CsvReader();        $csvReader->filename = $filename;        $csvReader->separator = CsvSeperator::COMMA;        foreach ($csvReader->getData() as $csvRow) {            /*$id = new CountryId();            $id->filter->andEqual($id->model->countryCode, $csvRow->getValue('ctry'));            $countryId = $id->getId();            if ($countryId === '') {                $countryId = 0;            }*/            /*            $data = new Station();            $data->updateOnDuplicate = true;            $data->active=false;            $data->stationCode = $csvRow->getValue('usaf');            $data->station = $csvRow->getValue('station name');            $data->countryId = $countryId;            $data->coordinate->latitude = $csvRow->getValue('LAT');            $data->coordinate->longitude = $csvRow->getValue('LON');            $data->coordinate->altitude = $csvRow->getValue('ELEV(M)');            $data->icao = $csvRow->getValue('icao');            $data->validFrom = (new SixDigitDate())->fromSixDigit($csvRow->getValue('begin'));            $data->validTo = (new SixDigitDate())->fromSixDigit($csvRow->getValue('end'));            $data->save();*/            /*$data = new Station();            $data->updateOnDuplicate = true;*/            $stationId =$csvRow->getValue('usaf');            $data->id = $stationId;  // $csvRow->getValue('usaf');            $data->active = false;            $data->stationCode = $csvRow->getValue('usaf');            $data->station = $csvRow->getValue('station name');            //$data->coordinate = $this->geoCoordinate;            $data->coordinate->latitude = $csvRow->getValue('LAT');            $data->coordinate->longitude = $csvRow->getValue('LON');            $data->coordinate->altitude = $csvRow->getValue('ELEV(M)');            $data->countryId = $countryStore->getId($csvRow->getValue('ctry'));  // $countryId;            $data->validFrom = (new SixDigitDate())->fromSixDigit($csvRow->getValue('begin'));            $data->validTo = (new SixDigitDate())->fromSixDigit($csvRow->getValue('end'));            $data->save();         /*            $type=new StationContentType($stationId);            (new IndexBuilder())->buildIndex($type);*/            //(new Debug())->write($dataId);            /*$type=new StationContentType();            $type->stationCode=$csvRow->getValue('usaf');            $type->station= $csvRow->getValue('station name');            $type->countryId=$countryId;            $type->geoCoordinate->latitude = $csvRow->getValue('LAT');            $type->geoCoordinate->longitude = $csvRow->getValue('LON');            $type->geoCoordinate->altitude= $csvRow->getValue('ELEV(M)');            $type->validFrom = (new SixDigitDate())->fromSixDigit($csvRow->getValue('begin'));            $type->validTo = (new SixDigitDate())->fromSixDigit($csvRow->getValue('end'));            $type->saveType();*/            //exit;        }        $data->saveBulk();        $update = new StationUpdate();        $update->active = false;        $update->update();        $update = new StationUpdate();        $update->filter->andEqualOrGreater($update->model->validTo, (new Date())->setNow()->minusDay(14)->getIsoDate());        $update->active = true;        $update->update();    }}