<?phpnamespace Nemundo\Meteo\Isd\Com\Chart;use Nemundo\Core\Type\DateTime\Date;use Nemundo\Core\Type\Number\Number;use Nemundo\Meteo\Isd\Data\MeasurementDay\MeasurementDayReader;use Nemundo\Meteo\Isd\Data\Station\StationRow;use Nemundo\Package\Echarts\Chart\AbstractDataChart;use Nemundo\Package\Echarts\Data\LineChartData;class TempChart extends AbstractDataChart{    /**     * @var StationRow     */    public $station1Row;    /**     * @var StationRow     */    public $station2Row;    /**     * @var Date     */    public $dateFrom;    /**     * @var Date     */    public $dateTo;    public function getContent()    {        $diff = $this->station2Row->coordinate->altitude-$this->station1Row->coordinate->altitude;        $this->chartTitle = 'Temp ' . $this->station1Row->station . ' - ' . $this->station2Row->station.' ('.$diff.'m)';        $lineData = new LineChartData($this);        $data = [];        $reader = new MeasurementDayReader();        $reader->filter->andEqual($reader->model->stationId, $this->station1Row->id);        $reader->filter->andEqualOrGreater($reader->model->date, $this->dateFrom->getIsoDate());        $reader->filter->andEqualOrSmaller($reader->model->date, $this->dateTo->getIsoDate());        $reader->addOrder($reader->model->date);        foreach ($reader->getData() as $measurementRow) {            $data[$measurementRow->date->getIsoDate()] = $measurementRow->temperatureMax;        }        $reader = new MeasurementDayReader();        $reader->filter->andEqual($reader->model->stationId, $this->station2Row->id);        $reader->filter->andEqualOrGreater($reader->model->date, $this->dateFrom->getIsoDate());        $reader->filter->andEqualOrSmaller($reader->model->date, $this->dateTo->getIsoDate());        $reader->addOrder($reader->model->date);        foreach ($reader->getData() as $measurementRow) {            $data[$measurementRow->date->getIsoDate()] = (new Number( ($data[$measurementRow->date->getIsoDate()]-$measurementRow->temperatureMax)/($diff/100)))->getRoundedNumber(1);        }        foreach ($data as $key => $value) {            $lineData->addValue($value);            $this->addXAxisLabel($key);        }        return parent::getContent();    }}