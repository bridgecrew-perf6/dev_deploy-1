<?phpnamespace Nemundo\Meteo\Isd\Download;use Nemundo\Core\Base\AbstractBase;use Nemundo\Meteo\Isd\Data\DownloadQueue\DownloadQueueReader;use Nemundo\Meteo\Isd\Data\DownloadQueue\DownloadQueueUpdate;use Nemundo\Meteo\Isd\Data\Station\StationReader;use Nemundo\Meteo\Isd\Import\MeasurementImport;use Nemundo\Meteo\Isd\Type\CountryType;// DownloadQueueManagerclass DownloadQueue extends AbstractBase{    // yearFrom    // yearTo    /*    public function saveCountryToDownloadQueueFromCountryCode($countryCode, $year)    {        $countryId = (new CountryType())->getCountryId($countryCode);        $this->saveCountryToDownloadQueueFromCountryId($countryId, $year);        return $this;    }*/    public function saveCountryToDownloadQueueFromCountryId($countryId, $year)    {        $reader = new StationReader();        $reader->filter->andEqual($reader->model->countryId, $countryId);        $reader->filter->andEqual($reader->model->active, true);        foreach ($reader->getData() as $stationRow) {            $data = new \Nemundo\Meteo\Isd\Data\DownloadQueue\DownloadQueue();            $data->ignoreIfExists = true;            $data->stationId = $stationRow->id;            $data->year = $year;            $data->finished = false;            $data->save();        }        return $this;    }    public function downloadQueue()    {        $queueReader = new DownloadQueueReader();        //$queueReader->model->loadStation();        //$queueReader->model->station->loadCountry();        $queueReader->filter->andEqual($queueReader->model->finished, false);        foreach ($queueReader->getData() as $queueRow) {            $download = new MeasurementImport();            $download->stationId = $queueRow->stationId;            $download->year = $queueRow->year;            $download->importData();            $update = new DownloadQueueUpdate();            $update->finished = true;            $update->updateById($queueRow->id);        }    }}