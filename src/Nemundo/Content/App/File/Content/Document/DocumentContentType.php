<?phpnamespace Nemundo\Content\App\File\Content\Document;use Nemundo\Content\App\File\Content\File\AbstractFileContentType;use Nemundo\Content\App\File\Content\File\UrlFileContentForm;use Nemundo\Content\App\File\Data\Document\Document;use Nemundo\Content\App\File\Data\Document\DocumentDelete;use Nemundo\Content\App\File\Data\Document\DocumentModel;use Nemundo\Content\App\File\Data\Document\DocumentReader;use Nemundo\Content\App\File\Data\Document\DocumentRow;use Nemundo\Content\App\File\Data\Document\DocumentUpdate;use Nemundo\Content\Index\Search\Type\SearchIndexTrait;use Nemundo\Content\Index\Tree\Com\Form\ContentSearchForm;use Nemundo\Core\File\FileInformation;use Nemundo\Core\File\FileSize;use Nemundo\Core\File\Pdf\PdfFile;use Nemundo\Core\System\OperatingSystem;use Nemundo\Core\TextFile\Reader\TextFileReader;use Nemundo\Model\Data\ModelUpdate;use Nemundo\Model\Type\Text\TextType;use Nemundo\Office\Word\WordReader;class DocumentContentType extends AbstractFileContentType{    use SearchIndexTrait;    protected function loadContentType()    {        $this->typeLabel = 'Document';        $this->typeId = '09386a3f-c44d-438b-9d7a-6c46d3f9537e';        $this->formClassList[] = DocumentContentForm::class;        $this->formClassList[] = UrlFileContentForm::class;        $this->formClassList[] = ContentSearchForm::class;        $this->viewClassList[] = DocumentContentView::class;        $this->listingClass = DocumentContentListing::class;        $this->formPartClass = DocumentContentFormPart::class;    }    protected function onCreate()    {        $data = new Document();        $data->document->fromFileProperty($this->file);        $this->dataId = $data->save();        $this->onUpdateText();    }    protected function onUpdate()    {    }    protected function onUpdateText() {        $documentRow = $this->getDataRow();        $filename = $documentRow->document->getFullFilename();        $file = new FileInformation($filename);        $text = '';        if ((new OperatingSystem())->isLinux()) {            if ($file->isPdf()) {                $pdfFile = new PdfFile($filename);                $text = $pdfFile->getPdfText();            }        }        if ($file->isText()) {            $txtFile = new TextFileReader($filename);            $text = $txtFile->getText();        }        if ($file->isWord()) {            $text = (new WordReader($filename))->getText();        }        $update = new DocumentUpdate();        $update->text = $text;        $update->updateById($this->dataId);    }    protected function onDelete()    {        (new DocumentDelete())->deleteById($this->dataId);    }    protected function onIndex()    {        /*        $documentRow = $this->getDataRow();        $filename = $documentRow->document->getFullFilename();        $file = new FileInformation($filename);        $text = '';        if ((new OperatingSystem())->isLinux()) {            if ($file->isPdf()) {                $pdfFile = new PdfFile($filename);                $text = $pdfFile->getPdfText();            }        }        if ($file->isText()) {            $txtFile = new TextFileReader($filename);            $text = $txtFile->getText();        }        if ($file->isWord()) {            $text = (new WordReader($filename))->getText();        }        $update = new DocumentUpdate();        $update->text = $text;        $update->updateById($this->dataId);        /*$this->addSearchWord($documentRow->document->getFilename());        $this->addSearchText($text);*/    }    protected function onDataRow()    {        $this->dataRow = (new DocumentReader())->getRowById($this->dataId);    }    /**     * @return \Nemundo\Model\Row\AbstractModelDataRow|DocumentRow     */    public function getDataRow()    {        return parent::getDataRow();    }    public function getSubject()    {        return $this->getDataRow()->document->getFilename();    }    public function updateSubject($subject)    {        $type = new TextType();        $type->fieldName = 'document_filename';        $update = new ModelUpdate();        $update->model = new DocumentModel();        $update->typeValueList->setModelValue($type, $subject);        $update->updateById($this->getDataId());    }    public function getText()    {        return $this->getDataRow()->text;    }    public function getData()    {        $data = [];        $data['filename'] = $this->getDataRow()->document->getFilename();        $data['fileextension'] = $this->getDataRow()->document->getFileExtension();        $data['filesize'] = $this->getDataRow()->document->getFileSize();        $data['filesize_text'] = (new FileSize($this->getDataRow()->document->getFileSize()))->getText();        $data['url'] = $this->getDataRow()->document->getUrl();        $data['text'] = $this->getDataRow()->text;        return $data;    }    public function getImageUrl()    {        //$url = '';        $url = 'https://icons.getbootstrap.com/assets/icons/filetype-'.$this->getDataRow()->document->getFileExtension().'.svg';        /*        switch ($this->getDataRow()->document->getFileExtension()) {            case 'pdf':                $url = '/asset/content_file/file-earmark-pdf.svg';                break;            case 'txt':                $url = '/asset/content_file/filetype-txt.svg';                break;            case 'doc':            case 'docx':                $url = '/asset/content_file/filetype-docx.svg';                break;            default:        }*/        return $url;    }}