<?phpnamespace Nemundo\Content\App\Bookmark\Content;use Nemundo\Content\App\Bookmark\Data\Bookmark\Bookmark;use Nemundo\Content\App\Bookmark\Data\Bookmark\BookmarkReader;use Nemundo\Content\App\Bookmark\Data\Bookmark\BookmarkRow;use Nemundo\Content\App\Bookmark\Data\Bookmark\BookmarkUpdate;use Nemundo\Content\Index\File\ImageIndexTrait;use Nemundo\Content\Index\Tree\Com\Form\ContentSearchForm;use Nemundo\Content\Type\AbstractContentType;use Nemundo\Content\Type\JsonContentTrait;use Nemundo\Core\Debug\Debug;use Nemundo\Crawler\HtmlParser\HtmlParser;use Nemundo\Crawler\HtmlParser\OpenGraphParser;use Nemundo\Model\Data\Property\File\FileProperty;class UrlContentType extends AbstractContentType{    //use JsonContentTrait;    use ImageIndexTrait;    public $url;    public $title;    public $description;    /**     * @var FileProperty     */    public $image;    protected function loadContentType()    {        $this->typeLabel = 'Url';        $this->typeId = '0abbd11d-5321-4eef-a984-0e4061c5738d';        $this->formClassList[] = UrlContentForm::class;        $this->formClassList[] = ContentSearchForm::class;        $this->viewClassList[] = UrlContentView::class;        $this->formPartClass = UrlContentFormPart::class;        $this->image = new FileProperty();    }    protected function onCreate()    {        $title = $this->title;        if ($title === '') {            $title = $this->url;        }        $data = new Bookmark();        $data->url = $this->url;        $data->title = $title;        $data->description = $this->description;        $data->hasImage = false;        if ($this->image->hasValue()) {            $data->hasImage = true;            $data->image->fromFileProperty($this->image);        }        $this->dataId = $data->save();    }    protected function onUpdate()    {        $update = new BookmarkUpdate();        $update->title = $this->title;        $update->description = $this->description;        $update->updateById($this->dataId);    }    protected function onIndex()    {        /* $this->addSearchText($this->getDataRow()->title);         $this->addSearchText($this->getDataRow()->description);*/    }    protected function onDataRow()    {        $this->dataRow = (new BookmarkReader())->getRowById($this->dataId);    }    /**     * @return \Nemundo\Model\Row\AbstractModelDataRow|BookmarkRow     */    public function getDataRow()    {        return parent::getDataRow();    }    public function getSubject()    {        return $this->getDataRow()->title;    }    public function getData()    {        $row = $this->getDataRow();        $data = [];        $data['title'] = $row->title;        $data['description'] = $row->description;        $data['url'] = $row->url;        $data['has_image'] = $row->hasImage;        $data['image_url'] = $row->image->getImageUrl($row->model->imageAutoSize800);        return $data;    }    public function fromUrl($url)    {        $this->url = $url;        $this->title = $url;        $ogParser = new OpenGraphParser($url);        $this->title = $ogParser->title;        $this->description = $ogParser->description;        if ($ogParser->hasImage) {            $this->image->fromUrl($ogParser->imageUrl);        }        if ($this->title == '') {            $htmlParser = new HtmlParser();            $htmlParser->fromUrl($url);            $this->title = $htmlParser->getPageTitle();            if ($this->description == '') {                $this->description = $htmlParser->getDescription();            }        }        return $this;    }    public function getImageFilename()    {        return '';    }    public function getImageUrl()    {        $url = '/asset/content_file/film.svg';        $imageRow=$this->getDataRow();        if ($imageRow->hasImage) {            $url=$imageRow->image->getImageUrl($imageRow->model->imageAutoSize800);        }        return $url;    }    public function updateSubject($subject)    {        $update = new BookmarkUpdate();        $update->title = $subject;        $update->updateById($this->getDataId());        /*        (new Debug())->write($subject);        (new Debug())->write($this->getDataId());*/    }}