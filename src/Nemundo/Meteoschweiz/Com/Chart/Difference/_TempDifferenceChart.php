<?phpnamespace Nemundo\Meteoschweiz\Com\Chart;use Nemundo\Com\Chart\Data\LineChartData;use Nemundo\Db\Sql\Order\SortOrder;use Nemundo\Meteoschweiz\Data\Messwert\MesswertReader;use Nemundo\Meteoschweiz\Data\MesswertStation\MesswertStationId;use Nemundo\Meteoschweiz\Data\MesswertStation\MesswertStationReader;use Nemundo\Package\Echarts\Chart\AbstractEchart;class TempDifferenceChart extends AbstractEchart{    /**     * @var string     */    public $stationCode1;    /**     * @var string     */    public $stationCode2;    /**     * @var int     */    public $messwertLimit = 100;    public function getContent()    {//        $this->chartTitle = 'Temp Difference ' . $this->stationCode1 . ' - ' . $this->stationCode2;        /*$this->yMinValue = -12;        $this->yMaxValue=12;*/        $id = new MesswertStationId();        $id->filter->andEqual($id->model->stationCode, $this->stationCode1);        $stationId1 = $id->getId();        $id = new MesswertStationId();        $id->filter->andEqual($id->model->stationCode, $this->stationCode2);        $stationId2 = $id->getId();        $station1Row = (new MesswertStationReader())->getRowById($stationId1);        $station2Row = (new MesswertStationReader())->getRowById($stationId2);        $altDiff = $station2Row->geoCoordinate->altitude-$station1Row->geoCoordinate->altitude;        $this->chartTitle = 'Temp Difference (pro 100m) ' . $station1Row->station . ' - ' . $station2Row->station.' ('.$altDiff.' m)';        if ($stationId1 !== '') {            $data = new LineChartData($this);            $qnh1 = [];            $reader = new MesswertReader();            $reader->model->loadStation();            $reader->filter->andEqual($reader->model->stationId, $stationId1);            $reader->addOrder($reader->model->id, SortOrder::DESCENDING);            $reader->limit = $this->messwertLimit;            $reader->reverse = true;            foreach ($reader->getData() as $messwertRow) {                if ($messwertRow->hasTemperature) {                    $qnh1[] = $messwertRow->temperature;                } else {                    $qnh1[] = null;                }            }            $n = 0;            $qnh2 = [];            $reader = new MesswertReader();            $reader->model->loadStation();            $reader->model->loadDateTime();            $reader->filter->andEqual($reader->model->stationId, $stationId2);            $reader->addOrder($reader->model->id, SortOrder::DESCENDING);            $reader->limit = $this->messwertLimit;            $reader->reverse = true;            foreach ($reader->getData() as $messwertRow) {                if ($messwertRow->hasTemperature) {                    if ($qnh1[$n] !== null) {                        $qnh2[] = $messwertRow->temperature;                        $data->addValue(($qnh1[$n] - $messwertRow->temperature)/($altDiff/100));                        $this->addXAxisLabel($messwertRow->dateTime->dateTime->getShortDateTimeLeadingZeroFormat());                        $n++;                    }                }            }        }        return parent::getContent();    }}